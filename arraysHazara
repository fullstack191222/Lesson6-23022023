public class Main {
    public static void main(String[] args) {

        //Rehearsal
        //Homework
        //exercise 2 to calculate average of the array.
     /*   int[] arr = {5,10,23,12,8,3}; //Average -> (5+10+23+12+8)/5 --> arr.length
        double sum = 0; //sum of all array elements
        for (int i = 0; i < arr.length; i++) {
            sum += arr[i]; //5,10,23,12,8  ---> sum = 0 + 5 // 5 + 10 // 15+23 // 38+12 // 50+8 = 58
        }
        //sum now have all elements aggregated
        System.out.println("the sum of the array = " + sum/arr.length);

        //exercise 6 find min and max.
        int min =0;
        int max  = 0;
        for (int i = 0; i < arr.length; i++) {
            //initialization
            if (min == 0) {
               min = arr[i];
            }
            if (max == 0) {
                max = arr[i];
            }
            //check if min < next element
            if (min >= arr[i]) {
                min = arr[i];//save the new minimum
            }
            //check if max  still the highest number
            if (max <= arr[i]) {
                max = arr[i];
            }
        }
        System.out.println("the minimum is " + min + " and the maximum is " + max);

*/
        

       /* -- create an array of numbers: 1, 3, 5, 8, 8, 5, 3, 1
        -- check if the array is a polindrom (which in this case it is)
        -- polindrom = all elements are repeated in a reverse order:
        -- here it is polidrom since --> 1 3 5 8 are reverse equal to 8 5 3 1
        -- another polindrom: 3 4 6 9 9 6 4 3
        -- not polindrom: 1 3 5 6 5 3 1 --> since 6 is not repeated*/
        //                  0 1  2  3  4  5  6  7         array.length= 8 
   /*     int[] polindrom = {1, 3, 5, 8, 8, 5, 10, 1};
        boolean isPolyndrom = true;
        int lastIndex = polindrom.length -1;
        for (int i = 0; i < polindrom.length/2; i++) {
            if (polindrom[i] != polindrom[lastIndex - i]) {
                isPolyndrom = false;
                break;
            }
        }
        if (isPolyndrom == true) {
            System.out.println("polyndrom");
        } else {
            System.out.println("not polyndrom");
        }
        //System.out.println(isPolyndrom);//true if array is polyndrom and false if not.*/


        //MultiDimensional ARRAYS
                        //0       1       2
        int [][] arr = {{4,5},
                        {6,7,8},
                        {9, 10, 14, -8}};
        int [] subArr0 = arr[0]; // {4,5}
        int [] subArr2 = arr[2]; // {9, 10, 14, -8}
        System.out.println( arr[1][1] );
        System.out.println(arr[2][3]);
        System.out.println(subArr2[3]);//-8
        System.out.println(arr[0][0]);
        System.out.println(arr[1][2]);

        //Exercise print all elements in multi dimensional array.
        for (int i = 0; i < arr.length; i++) {
            int[] subArray = arr[i];//{4,5}, {6,7,8} , {9,10,14, -8}
            for (int j = 0; j < subArray.length; j++) {
                System.out.print(arr[i][j] + ",");
            }
            System.out.println();
        }


      //  what is the value of sum after this code executes?
        int[][] matrix = {{1,1,2,2},
                          {1,2,2,4},
                          {1,2,3,4},
                          {1,4,1,2}};
        int sum = 0;
        int col = matrix[0].length - 2; // 2
        for (int row = 0; row < 4; row++)
        {
            sum = sum + matrix[row][col]; //0|2 , 1|2, 2|2 , 3|2
        }
        System.out.println(sum);

        //Exercise.
        //create 2dimensional array (matrix)  of ints.
        //calculate and print sum of all elements.
        int matrixSum = 0;
        int maximum = -1;
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[i].length; j++) {
                matrixSum += matrix[i][j];  // 0,0 ; 0,1 ; 0,2; 0,3  --- 1.0; 1.1; 1.2 ; 1.3
                if (matrix[i][j] > maximum) {
                    maximum = matrix[i][j];
                }
            }
        }
        System.out.println(matrixSum);
        System.out.println(maximum);

    }
}
